------------------------------------------------------------------------------------------------------------------------------------------

STUDENT COURSE ENROLLMENT SYSTEM:

------------------------------------------------------------------------------------------------------------------------------------------

import java.util.*;

public class SimpleStudentCourse {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<String> students = new ArrayList<>();
        HashMap<String, ArrayList<String>> courses = new HashMap<>();

        while (true) {
            System.out.println("1. Add Student");
            System.out.println("2. Enroll Course");
            System.out.println("3. Remove Student");
            System.out.println("4. Show All");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            if (choice == 1) 
            {
                System.out.print("Enter student name: ");
                String name = sc.nextLine();
                students.add(name);
                courses.put(name, new ArrayList<>());
                System.out.println("Student added.");
            } 
            else if (choice == 2) {
                System.out.print("Enter student name: ");
                String name = sc.nextLine();
                if (courses.containsKey(name)) {
                    System.out.print("Enter course name: ");
                    String course = sc.nextLine();
                    courses.get(name).add(course);
                    System.out.println("Course added.");
                } else {
                    System.out.println("Student not found.");
                }
            } 
            else if (choice == 3) {
                System.out.print("Enter student name to remove: ");
                String name = sc.nextLine();
                students.remove(name);
                courses.remove(name);
                System.out.println("Student removed.");
            } 
            else if (choice == 4) {
                System.out.println("\n--- Students and Courses ---");
                for (String name : students) {
                    System.out.println(name + " => " + courses.get(name));
                }
            } 
            else if (choice == 5) {
                System.out.println("Goodbye!");
                break;
            } 
            else {
                System.out.println("Invalid choice!");
            }
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------

TICKET BOOKING SIMULATION

------------------------------------------------------------------------------------------------------------------------------------------


class TicketBooking {
    private int totalSeats;

    public TicketBooking(int seats) {
        this.totalSeats = seats;
    }

   
    public synchronized void bookTickets(String user, int seatsRequested) {
        System.out.println(user + " is trying to book " + seatsRequested + " ticket(s).");

        try {
            Thread.sleep(1000); // Simulate delay
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        if (seatsRequested <= totalSeats) {
            System.out.println("Booking successful for " + user + "!");
            totalSeats -= seatsRequested;
        } else {
            System.out.println("Booking failed for " + user + ",Due to unavailability of seats");
        }

        System.out.println("Remaining seats: " + totalSeats + "\n");
    }
}

class UserThread extends Thread {
    private TicketBooking booking;
    private String userName;
    private int seatsToBook;

    public UserThread(TicketBooking booking, String userName, int seatsToBook) {
        this.booking = booking;
        this.userName = userName;
        this.seatsToBook = seatsToBook;
    }

    @Override
    public void run() {
        booking.bookTickets(userName, seatsToBook);
    }
}

public class TicketBookingSystem {
    public static void main(String[] args) {
        TicketBooking bookingSystem = new TicketBooking(10); 

       
        UserThread user1 = new UserThread(bookingSystem, "Radha",2);
        UserThread user2 = new UserThread(bookingSystem, "krishna", 2);
        UserThread user3 = new UserThread(bookingSystem, "chtuki", 3);
        UserThread user4 = new UserThread(bookingSystem, "mowgli", 4);

       
        user1.start();
        user2.start();
        user3.start();
        user4.start();
    }
}

------------------------------------------------------------------------------------------------------------------------------------------